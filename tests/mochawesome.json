{
  "stats": {
    "suites": 8,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-09T14:54:26.332Z",
    "end": "2024-03-09T14:54:26.561Z",
    "duration": 229,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d3db8d09-cec1-4aa7-9f5e-9f0e9e96d8e0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a391ada2-0c1f-4e12-a37a-45736c245897",
          "title": "Initialise Trigger Toggles with defaults ",
          "fullFile": "C:\\Users\\mdcoo\\dev\\TriggerJS\\triggersjs\\tests\\toggle.test.js",
          "file": "\\tests\\toggle.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Initialise Trigger Toggles with defaults \"",
              "fullTitle": "Initialise Trigger Toggles with defaults  \"before each\" hook in \"Initialise Trigger Toggles with defaults \"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dom = getDom(htmlDefaultsString);\ndocument = dom.window.document;\nfirstParent = document.querySelector('[target=\"default\"]')\nclickedCount = 0;\nclicked = false;",
              "err": {},
              "uuid": "c4d564ec-84a5-462c-aa8b-780781efaae8",
              "parentUUID": "a391ada2-0c1f-4e12-a37a-45736c245897",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should initialize the triggers toggles with defaults ",
              "fullTitle": "Initialise Trigger Toggles with defaults  should initialize the triggers toggles with defaults ",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//have initialized\n        expect(firstParent.hasAttribute('target')).to.equal(true);\n        expect(firstParent.classList.contains('target_open')).to.equal(true);\n        initTriggerToggles(null, null, (e, parentNode, node, eventName, index, selectors) => {\n            clickedCount++\n            clicked = true;\n            const myParent = _findParent(e.currentTarget, '[target=\"default\"]')\n        }, document);\n        const firstTrigger = document.querySelector('[trigger=\"default\"]');\n        const firstTriggerParent = _findParent(firstTrigger, '[target=\"default\"]')\n        \n        firstTrigger.click()\n        expect(firstParent.classList.contains('target_open')).to.equal(false);\n        expect(firstParent.classList.contains('target_closed')).to.equal(true);\n        document.querySelector('[trigger=\"default\"]').click()\n        expect(firstParent.classList.contains('target_open')).to.equal(true);\n        expect(firstParent.classList.contains('target_closed')).to.equal(false);\n        document.querySelector('[trigger=\"default\"]').click()\n        expect(firstParent.classList.contains('target_open')).to.equal(false);\n        expect(firstParent.classList.contains('target_closed')).to.equal(true);\n        expect(clicked).to.equal(true);\n        expect(clickedCount).to.equal(3);",
              "err": {},
              "uuid": "1d455f66-5190-4b45-827e-3ca2354f9fda",
              "parentUUID": "a391ada2-0c1f-4e12-a37a-45736c245897",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should initialize the triggers toggles with defaults ",
              "fullTitle": "Initialise Trigger Toggles with defaults  should initialize the triggers toggles with defaults ",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//have initialized\n        const selectors = {\n            defaultClassIndex: 1\n        }\n        \n        expect(firstParent.hasAttribute('target')).to.equal(true);\n        expect(firstParent.classList.contains('target_open')).to.equal(true);\n        initTriggerToggles(null, null, (e, parentNode, node, eventName, index, selectors) => {\n            clickedCount++\n            clicked = true;\n            const myParent = _findParent(e.currentTarget, '[target=\"default\"]')\n        }, document);\n        const firstTrigger = document.querySelector('[trigger=\"default\"]');\n        const firstTriggerParent = _findParent(firstTrigger, '[target=\"default\"]')\n        \n        firstTrigger.click()\n        expect(firstParent.classList.contains('target_open')).to.equal(false);\n        expect(firstParent.classList.contains('target_closed')).to.equal(true);\n        document.querySelector('[trigger=\"default\"]').click()\n        expect(firstParent.classList.contains('target_open')).to.equal(true);\n        expect(firstParent.classList.contains('target_closed')).to.equal(false);\n        document.querySelector('[trigger=\"default\"]').click()\n        expect(firstParent.classList.contains('target_open')).to.equal(false);\n        expect(firstParent.classList.contains('target_closed')).to.equal(true);\n        expect(clicked).to.equal(true);\n        expect(clickedCount).to.equal(3);",
              "err": {},
              "uuid": "993a81bc-eed0-4c56-ac47-85dec0df8d8e",
              "parentUUID": "a391ada2-0c1f-4e12-a37a-45736c245897",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d455f66-5190-4b45-827e-3ca2354f9fda",
            "993a81bc-eed0-4c56-ac47-85dec0df8d8e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fc19d554-c05c-4ad7-a843-bd667759cb08",
          "title": "Initialise Trigger Toggles with selectors ",
          "fullFile": "C:\\Users\\mdcoo\\dev\\TriggerJS\\triggersjs\\tests\\toggle.test.js",
          "file": "\\tests\\toggle.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Initialise Trigger Toggles with selectors \"",
              "fullTitle": "Initialise Trigger Toggles with selectors  \"before each\" hook in \"Initialise Trigger Toggles with selectors \"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dom = getDom(htmlSelectorsString);\ndocument = dom.window.document;\nfirstParent = document.querySelector('[target=\"folder\"]')\nclickedCount = 0;\nclicked = false;",
              "err": {},
              "uuid": "0e649bbe-07e5-453d-9175-51b915e45492",
              "parentUUID": "fc19d554-c05c-4ad7-a843-bd667759cb08",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should initialize the triggers with selectors ",
              "fullTitle": "Initialise Trigger Toggles with selectors  should initialize the triggers with selectors ",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//have initialized\n        const selectors = {\n            triggerSelector: '[trigger=\"folder\"',\n            parentSelector: '[target=\"folder\"]',\n            classNames: [\"folder_open\", \"folder_closed\"],\n            defaultClassIndex: null\n        }\n        expect(firstParent.hasAttribute('target')).to.equal(true);\n        expect(firstParent.classList.contains('folder_open')).to.equal(true);\n        initTriggerToggles(selectors, \"click\", (e, parentNode, node, eventName, index, selectors) => {\n            clickedCount++\n            clicked = true;\n            // console.log(`parentNode.classList = ${parentNode.classList}`)\n        }, document);\n        document.querySelector('[trigger=\"folder\"]').click()\n        expect(clicked).to.equal(true);\n        expect(clickedCount).to.equal(1);\n        expect(firstParent.classList.contains('folder_open')).to.equal(false);\n        expect(firstParent.classList.contains('folder_closed')).to.equal(true);\n        document.querySelector('[trigger=\"folder\"]').click()\n        expect(clickedCount).to.equal(2);\n        expect(firstParent.classList.contains('folder_open')).to.equal(true);\n        expect(firstParent.classList.contains('folder_closed')).to.equal(false);",
              "err": {},
              "uuid": "e78110c0-a3ac-433f-94c2-aecdc8bd2195",
              "parentUUID": "fc19d554-c05c-4ad7-a843-bd667759cb08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should initialize the triggers with selectors & defaultClassIndex",
              "fullTitle": "Initialise Trigger Toggles with selectors  should initialize the triggers with selectors & defaultClassIndex",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//have initialized\n        const selectors = {\n            triggerSelector: '[trigger=\"folder\"',\n            parentSelector: '[target=\"folder\"]',\n            classNames: [\"folder_open\", \"folder_closed\"],\n            defaultClassIndex: 1\n        }\n        expect(firstParent.hasAttribute('target')).to.equal(true);\n        expect(firstParent.classList.contains('folder_open')).to.equal(true);\n        initTriggerToggles(selectors, \"click\", (e, parentNode, node, eventName, index, selectors) => {\n            clickedCount++\n            clicked = true;\n            // console.log(`parentNode.classList = ${parentNode.classList}`)\n        }, document);\n        document.querySelector('[trigger=\"folder\"]').click()\n        expect(clicked).to.equal(true);\n        expect(clickedCount).to.equal(1);\n        expect(firstParent.classList.contains('folder_open')).to.equal(true);\n        expect(firstParent.classList.contains('folder_closed')).to.equal(false);\n        document.querySelector('[trigger=\"folder\"]').click()\n        expect(clickedCount).to.equal(2);\n        expect(firstParent.classList.contains('folder_open')).to.equal(false);\n        expect(firstParent.classList.contains('folder_closed')).to.equal(true);",
              "err": {},
              "uuid": "948566c7-cff5-42c7-9490-d89a29f6928f",
              "parentUUID": "fc19d554-c05c-4ad7-a843-bd667759cb08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should initialize the triggers with selectors and click on trigger that is not default class",
              "fullTitle": "Initialise Trigger Toggles with selectors  should initialize the triggers with selectors and click on trigger that is not default class",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//have initialized\n        const selectors = {\n            triggerSelector: '[trigger=\"folder\"',\n            parentSelector: '[target=\"folder\"]',\n            classNames: [\"folder_open\", \"folder_closed\"],\n            defaultClassIndex: 1\n        }\n        let secondParent = document.querySelector('[target=\"folder\"]:nth-child(2)')\n        let secondTrigger = document.querySelectorAll('[trigger=\"folder\"]')[1]\n        expect(firstParent.hasAttribute('target')).to.equal(true);\n        expect(secondParent.classList.contains('folder_closed')).to.equal(true);\n        initTriggerToggles(selectors, \"click\", (e, parentNode, node, eventName, index, selectors) => {\n            clickedCount++\n            clicked = true;\n            // console.log(`parentNode.classList = ${parentNode.classList}`)\n        }, document);\n        secondTrigger.click()\n        expect(clicked).to.equal(true);\n        expect(clickedCount).to.equal(1);\n        expect(secondParent.classList.contains('folder_open')).to.equal(true);\n        expect(secondParent.classList.contains('folder_closed')).to.equal(false);\n        secondTrigger.click()\n        expect(clickedCount).to.equal(2);\n        expect(secondParent.classList.contains('folder_open')).to.equal(false);\n        expect(secondParent.classList.contains('folder_closed')).to.equal(true);",
              "err": {},
              "uuid": "9f7770cd-8ee4-4768-92da-19fc54832dfa",
              "parentUUID": "fc19d554-c05c-4ad7-a843-bd667759cb08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e78110c0-a3ac-433f-94c2-aecdc8bd2195",
            "948566c7-cff5-42c7-9490-d89a29f6928f",
            "9f7770cd-8ee4-4768-92da-19fc54832dfa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "76bfb14f-96dc-4b78-82e2-dc4a6c013b9e",
          "title": "hello trigger",
          "fullFile": "C:\\Users\\mdcoo\\dev\\TriggerJS\\triggersjs\\tests\\trigger.test.js",
          "file": "\\tests\\trigger.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should say hello",
              "fullTitle": "hello trigger should say hello",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(true).to.equal(true);\n// expect(trigger_hello()).to.equal(\"Hello triggerjs!!!!\")",
              "err": {},
              "uuid": "b3f23c55-7dce-4017-9b12-b6f75e985b47",
              "parentUUID": "76bfb14f-96dc-4b78-82e2-dc4a6c013b9e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3f23c55-7dce-4017-9b12-b6f75e985b47"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2d18dae1-0da1-416e-82bf-a808f3023900",
          "title": "throw errors",
          "fullFile": "C:\\Users\\mdcoo\\dev\\TriggerJS\\triggersjs\\tests\\trigger.test.js",
          "file": "\\tests\\trigger.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should throw error when no DOM",
              "fullTitle": "throw errors should throw error when no DOM",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => { initTriggers(null, null, null, null) }, Error, 'The DOM does not exist.  The DOM is required to initialize triggers.');\nassert.throws(() => { initTriggers() }, Error, 'The DOM does not exist.  The DOM is required to initialize triggers.');",
              "err": {},
              "uuid": "6be23502-9ac7-46ae-84fc-553e35cbeb3b",
              "parentUUID": "2d18dae1-0da1-416e-82bf-a808f3023900",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6be23502-9ac7-46ae-84fc-553e35cbeb3b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bea99737-b547-44f7-93f9-877ee82e4206",
          "title": "Initialise selectors ",
          "fullFile": "C:\\Users\\mdcoo\\dev\\TriggerJS\\triggersjs\\tests\\trigger.test.js",
          "file": "\\tests\\trigger.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should iniitalize the selectors with a name string",
              "fullTitle": "Initialise selectors  should iniitalize the selectors with a name string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const selectors = \"folder\"\nconst newSelectors = _initSelectors(selectors);\nconst expectedSelectors = {\n    \"parentSelector\":\"[target=\\\"folder\\\"]\",\n    \"triggerSelector\":\"[target=\\\"folder\\\"] [trigger=\\\"folder\\\"\"\n}\nexpect(_deepCompare(newSelectors, expectedSelectors)).to.equal(true);",
              "err": {},
              "uuid": "b9bd4eba-7de3-464c-8820-813ef7a41054",
              "parentUUID": "bea99737-b547-44f7-93f9-877ee82e4206",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should iniitalize the selectors with a name in object and retain other elements",
              "fullTitle": "Initialise selectors  should iniitalize the selectors with a name in object and retain other elements",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const selectors = {\n    name: \"folder\",\n    other1: \"other1\",\n    other2: \"other2\"\n}\nconst newSelectors = _initSelectors(selectors);\nconst expectedSelectors = {\n    \"parentSelector\":\"[target=\\\"folder\\\"]\",\n    \"triggerSelector\":\"[target=\\\"folder\\\"] [trigger=\\\"folder\\\"\",\n    other1: \"other1\",\n    other2: \"other2\"\n}\nexpect(_deepCompare(newSelectors, expectedSelectors)).to.equal(true);",
              "err": {},
              "uuid": "0206febb-8501-44cb-a18b-fe8386b9af94",
              "parentUUID": "bea99737-b547-44f7-93f9-877ee82e4206",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should iniitalize the selectors with a parentSelector and triggerSelector in object and retain other elements",
              "fullTitle": "Initialise selectors  should iniitalize the selectors with a parentSelector and triggerSelector in object and retain other elements",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const selectors = {\n    \"parentSelector\":\"[target=\\\"folder\\\"]\",\n    \"triggerSelector\":\"[trigger=\\\"folder\\\"\",\n    other1: \"other1\",\n    other2: \"other2\"\n}\nconst newSelectors = _initSelectors(selectors);\nconst expectedSelectors = {\n    \"parentSelector\":\"[target=\\\"folder\\\"]\",\n    \"triggerSelector\":\"[target=\\\"folder\\\"] [trigger=\\\"folder\\\"\",\n    other1: \"other1\",\n    other2: \"other2\"\n}\nconsole.log(`newSelectors = ${JSON.stringify(newSelectors)}`)\nexpect(_deepCompare(newSelectors, expectedSelectors)).to.equal(true);",
              "err": {},
              "uuid": "8f699602-6664-4bea-aace-09459af36af0",
              "parentUUID": "bea99737-b547-44f7-93f9-877ee82e4206",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b9bd4eba-7de3-464c-8820-813ef7a41054",
            "0206febb-8501-44cb-a18b-fe8386b9af94",
            "8f699602-6664-4bea-aace-09459af36af0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7155b7e9-8fa9-4a90-bc41-171b27238dbb",
          "title": "Initialise Triggers with defaults ",
          "fullFile": "C:\\Users\\mdcoo\\dev\\TriggerJS\\triggersjs\\tests\\trigger.test.js",
          "file": "\\tests\\trigger.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Initialise Triggers with defaults \"",
              "fullTitle": "Initialise Triggers with defaults  \"before each\" hook in \"Initialise Triggers with defaults \"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dom = getDom(htmlDefaultsString);\ndocument = dom.window.document;\nfirstParent = document.querySelector('[target=\"default\"]');\nnestedParent = document.querySelector('[target=\"default\"] [target=\"default\"]');\nclickedCount = 0;\nclicked = false;",
              "err": {},
              "uuid": "3fbb3782-350e-4cec-9744-1e8c197a3710",
              "parentUUID": "7155b7e9-8fa9-4a90-bc41-171b27238dbb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should initialize the triggers with defaults ",
              "fullTitle": "Initialise Triggers with defaults  should initialize the triggers with defaults ",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//have initialized\n        expect(firstParent.hasAttribute('target')).to.equal(true);\n        expect(firstParent.classList.contains('target_open')).to.equal(true);\n        initTriggers( false, false, (e, parentNode, node, eventName, index, selectors) => {\n            clickedCount++\n            clicked = true;\n            const myParent = _findParent(e.currentTarget, '[target]')\n            myParent.classList.toggle('target_open');\n            myParent.classList.toggle('target_closed');\n        }, document);\n        document.querySelector('[trigger=\"default\"]').click()\n        expect(firstParent.classList.contains('target_open')).to.equal(false);\n        expect(firstParent.classList.contains('target_closed')).to.equal(true);\n        document.querySelector('[trigger=\"default\"]').click()\n        expect(firstParent.classList.contains('target_open')).to.equal(true);\n        expect(firstParent.classList.contains('target_closed')).to.equal(false);\n        document.querySelector('[trigger=\"default\"]').click()\n        expect(firstParent.classList.contains('target_open')).to.equal(false);\n        expect(firstParent.classList.contains('target_closed')).to.equal(true);\n        expect(clicked).to.equal(true);\n        expect(clickedCount).to.equal(3);",
              "err": {},
              "uuid": "92f8e31d-4ce5-4ef6-8798-029610544c58",
              "parentUUID": "7155b7e9-8fa9-4a90-bc41-171b27238dbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should initialize the triggers with defaults and no callback ",
              "fullTitle": "Initialise Triggers with defaults  should initialize the triggers with defaults and no callback ",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//have initialized\n        initTriggers(null, null, null, document);\n        document.querySelector('[trigger=\"default\"]').click()\n        document.querySelector('[trigger=\"default\"]').click()\n        expect(clicked).to.equal(false);\n        expect(clickedCount).to.equal(0);",
              "err": {},
              "uuid": "5cc79c40-9f3d-4451-906d-c727865941c6",
              "parentUUID": "7155b7e9-8fa9-4a90-bc41-171b27238dbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should initialize the trigger with defaults and click nested element ",
              "fullTitle": "Initialise Triggers with defaults  should initialize the trigger with defaults and click nested element ",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//have initialized\n        expect(nestedParent.hasAttribute('target')).to.equal(true);\n        expect(nestedParent.classList.contains('target_closed')).to.equal(true);\n        initTriggers(null, null, (e, parentNode, node, eventName, index, selectors) => {\n            clickedCount++\n            clicked = true;\n            const myParent = _findParent(e.currentTarget, '[target]')\n            myParent.classList.toggle('target_open');\n            myParent.classList.toggle('target_closed');\n        }, document);\n    \n        document.querySelector('[target] [target] [trigger=\"default\"]').click()\n        expect(nestedParent.classList.contains('target_closed')).to.equal(false);\n        expect(nestedParent.classList.contains('target_open')).to.equal(true);\n        document.querySelector('[target] [target] [trigger=\"default\"]').click()\n        expect(nestedParent.classList.contains('target_closed')).to.equal(true);\n        expect(nestedParent.classList.contains('target_open')).to.equal(false);\n        document.querySelector('[target] [target] [trigger=\"default\"]').click()\n        expect(nestedParent.classList.contains('target_closed')).to.equal(false);\n        expect(nestedParent.classList.contains('target_open')).to.equal(true);\n        expect(clicked).to.equal(true);\n        expect(clickedCount).to.equal(3);",
              "err": {},
              "uuid": "e97bd230-aeef-4d4a-a081-31bd28290ac1",
              "parentUUID": "7155b7e9-8fa9-4a90-bc41-171b27238dbb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "92f8e31d-4ce5-4ef6-8798-029610544c58",
            "5cc79c40-9f3d-4451-906d-c727865941c6",
            "e97bd230-aeef-4d4a-a081-31bd28290ac1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9563ab07-30a7-4325-b133-a9b33828b464",
          "title": "Initialise Triggers with selectors ",
          "fullFile": "C:\\Users\\mdcoo\\dev\\TriggerJS\\triggersjs\\tests\\trigger.test.js",
          "file": "\\tests\\trigger.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Initialise Triggers with selectors \"",
              "fullTitle": "Initialise Triggers with selectors  \"before each\" hook in \"Initialise Triggers with selectors \"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dom = getDom(htmlSelectorsString);\ndocument = dom.window.document;\nfirstParent = document.querySelector('[target=\"folder\"]');\nclickedCount = 0;\nclicked = false;",
              "err": {},
              "uuid": "084f6934-c077-49a3-b48c-d2dafb33c049",
              "parentUUID": "9563ab07-30a7-4325-b133-a9b33828b464",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should initialize the triggers with selectors ",
              "fullTitle": "Initialise Triggers with selectors  should initialize the triggers with selectors ",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//have initialized\n        const selectors = {\n            triggerSelector: '[trigger=\"folder\"]',\n            parentSelector: '[target=\"folder\"]',\n            toggleSelector1: \"folder_open\",\n            toggleSelector2: \"folder_closed\",\n        }\n        expect(firstParent.hasAttribute(\"target\")).to.equal(true);\n        expect(firstParent.classList.contains('folder_open')).to.equal(true);\n        initTriggers(selectors, \"click\", (e, parentNode, node, eventName, index, selectors) => {\n            clickedCount++\n            clicked = true;\n            const myParent = _findParent(e.currentTarget, '[target=\"folder\"]')\n            myParent.classList.remove('folder_open');\n            myParent.classList.add('folder_closed');\n        }, document);\n        document.querySelector('[trigger=\"folder\"]').click()\n        document.querySelector('[trigger=\"folder\"]').click()\n        expect(clicked).to.equal(true);\n        expect(clickedCount).to.equal(2);\n        expect(firstParent.classList.contains('folder_open')).to.equal(false);\n        expect(firstParent.classList.contains('folder_closed')).to.equal(true);",
              "err": {},
              "uuid": "3244bdeb-6fbb-4038-94b6-24bd148d9542",
              "parentUUID": "9563ab07-30a7-4325-b133-a9b33828b464",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3244bdeb-6fbb-4038-94b6-24bd148d9542"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d252183f-437b-413b-a9af-43bf04b76d09",
          "title": "Initialise Triggers with a name ",
          "fullFile": "C:\\Users\\mdcoo\\dev\\TriggerJS\\triggersjs\\tests\\trigger.test.js",
          "file": "\\tests\\trigger.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Initialise Triggers with a name \"",
              "fullTitle": "Initialise Triggers with a name  \"before each\" hook in \"Initialise Triggers with a name \"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dom = getDom(htmlSelectorsString);\ndocument = dom.window.document;\nfirstParent = document.querySelector('[target=\"folder\"');\nclickedCount = 0;\nclicked = false;",
              "err": {},
              "uuid": "6d7e23b8-a8eb-4ee8-8216-5b5b69194e6b",
              "parentUUID": "d252183f-437b-413b-a9af-43bf04b76d09",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should initialize the triggers with a name ",
              "fullTitle": "Initialise Triggers with a name  should initialize the triggers with a name ",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//have initialized\n        const selectors = {\n            name: 'folder',\n            toggleSelector1: \"folder_open\",\n            toggleSelector2: \"folder_closed\",\n        }\n        expect(firstParent.hasAttribute(\"target\")).to.equal(true);\n        expect(firstParent.classList.contains('folder_open')).to.equal(true);\n        initTriggers(selectors, \"click\", (e, parentNode, node, eventName, index, selectors) => {\n            clickedCount++\n            clicked = true;\n            // console.log(`callback selectors = ${JSON.stringify(selectors)}`)\n            const myParent = _findParent(e.currentTarget, '[target=\"folder\"]')\n            myParent.classList.remove('folder_open');\n            myParent.classList.add('folder_closed');\n        }, document);\n        document.querySelector('[trigger=\"folder\"]').click()\n        document.querySelector('[trigger=\"folder\"]').click()\n        expect(clicked).to.equal(true);\n        expect(clickedCount).to.equal(2);\n        expect(firstParent.classList.contains('folder_open')).to.equal(false);\n        expect(firstParent.classList.contains('folder_closed')).to.equal(true);",
              "err": {},
              "uuid": "f840b046-8b17-4a65-a56d-3c7102a3615c",
              "parentUUID": "d252183f-437b-413b-a9af-43bf04b76d09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should initialize the triggers with a name ",
              "fullTitle": "Initialise Triggers with a name  should initialize the triggers with a name ",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//have initialized\n        const selectors = 'folder';\n        expect(firstParent.hasAttribute(\"target\")).to.equal(true);\n        expect(firstParent.classList.contains('folder_open')).to.equal(true);\n        initTriggers(selectors, \"click\", (e, parentNode, node, eventName, index, selectors) => {\n            clickedCount++\n            clicked = true;\n            // console.log(`callback selectors = ${JSON.stringify(selectors)}`)\n            const myParent = _findParent(e.currentTarget, '[target=\"folder\"]')\n            myParent.classList.remove('folder_open');\n            myParent.classList.add('folder_closed');\n        }, document);\n        document.querySelector('[trigger=\"folder\"]').click()\n        document.querySelector('[trigger=\"folder\"]').click()\n        expect(clicked).to.equal(true);\n        expect(clickedCount).to.equal(2);\n        expect(firstParent.classList.contains('folder_open')).to.equal(false);\n        expect(firstParent.classList.contains('folder_closed')).to.equal(true);",
              "err": {},
              "uuid": "d3ffcdac-f5c8-4e6f-94ce-469f24385526",
              "parentUUID": "d252183f-437b-413b-a9af-43bf04b76d09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f840b046-8b17-4a65-a56d-3c7102a3615c",
            "d3ffcdac-f5c8-4e6f-94ce-469f24385526"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "tests",
        "": true
      },
      "version": "6.2.0"
    }
  }
}